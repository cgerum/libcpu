PROJECT(libcpu)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

INCLUDE(FindThreads)

#
# 
#
SET(CMAKE_BUILD_TYPE "Debug")

#
# Add here the architecture you want to support.
# 
SET(GUEST_ARCHITECTURES 6502 m68k m88k mips arm)
#IF(APPLE)
#  SET(GUEST_EXTRA_TESTS next68k)
#ENDIF(APPLE)

#
# Build Universal image.
#
IF(APPLE)
  OPTION(UNIVERSAL "Build Universal Executable" OFF)
ENDIF(APPLE)

IF(APPLE AND UNIVERSAL)
	INCLUDE(CMake/AppleMultiArch.cmake)
ENDIF()

#
# Find LLVM, we need it.
#
SET(LLVM_FIND_REQUIRED TRUE)
INCLUDE(CMake/FindLLVM.cmake)

#
#
#
INCLUDE_DIRECTORIES(${LLVM_INCLUDE_DIR} ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/libcpu)
# Add LLVM flags only to C++.
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${LLVM_COMPILE_FLAGS}")

MACRO(TARGET_LINK_LLVM TARGET)
  TARGET_LINK_LIBRARIES(${TARGET} ${LLVM_LDFLAGS} ${LLVM_LIBS_CORE} ${LLVM_LIBS_JIT} ${LLVM_LIBS_JIT_OBJECTS})
ENDMACRO(TARGET_LINK_LLVM)

FOREACH(ARCHITECTURE ${GUEST_ARCHITECTURES})
	IF(EXISTS ${PROJECT_SOURCE_DIR}/arch/${ARCHITECTURE})
		MESSAGE("** Building Guest Architecture: ${ARCHITECTURE}")
		ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/arch/${ARCHITECTURE})
		INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/arch/${ARCHITECTURE})
		IF(EXISTS ${PROJECT_SOURCE_DIR}/test/${ARCHITECTURE})
			MESSAGE("** Building Test: ${ARCHITECTURE}")
			ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/test/${ARCHITECTURE})
		ENDIF()
    SET(GUEST_ARCHITECTURES_ENABLED "${GUEST_ARCHITECTURES_ENABLED};${ARCHITECTURE}")
	ELSE()
		MESSAGE("** Disabling Guest Architecture: ${ARCHITECTURE}")
	ENDIF()
ENDFOREACH()

FOREACH(TEST ${GUEST_EXTRA_TESTS})
	IF(EXISTS ${PROJECT_SOURCE_DIR}/test/${TEST})
		MESSAGE("** Building Test: ${TEST}")
		ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/test/${TEST})
	ENDIF()
ENDFOREACH()

ADD_SUBDIRECTORY(libcpu)
ADD_SUBDIRECTORY(test/libnix)

