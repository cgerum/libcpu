arch "8086" {

	name "Intel 8086";

	endian little;

	byte_size 8;
	word_size 16;
	address_size 24;
	psr_size 16;

	register_file {

		group R {

			[ #i16 bx -> #i8 ( bh : bl ) ],
			[ #i16 ax -> #i8 ( ah : al ) ],
			[ #i16 cx -> #i8 ( ch : cl ) ],
	 		[ #i16 dx -> #i8 ( dh : dl ) ],
			[ #i16 sp ],
			[ #i16 bp ],
			[ #i16 si ],
			[ #i16 di ],

			[ #i32 ebx -> #i16 ( _ : _ <-> bx ) ],
			[ #i32 eax -> #i16 ( _ : _ <-> ax ) ],
			[ #i32 ecx -> #i16 ( _ : _ <-> cx ) ],
			[ #i32 edx -> #i16 ( _ : _ <-> dx ) ],
			[ #i32 esp -> #i16 ( _ : _ <-> sp ) ],
			[ #i32 ebp -> #i16 ( _ : _ <-> bp ) ],
			[ #i32 esi -> #i16 ( _ : _ <-> si ) ],
			[ #i32 edi -> #i16 ( _ : _ <-> di ) ]
		}

		group SEG {

			[ #i16 cs ],
			[ #i16 ds ],
			[ #i16 ss ],
			[ #i16 es ]

		}

		group S {

			[ #i16 ip ],
			[ #i32 eip -> #i16 ( _ : _ <-> ip ) ],
			[ #i48 pc -> %PC explicit evaluate ( @ea ( seg, off ) ) [ #i16 seg <- cs, #i32 off <-> eip ] ],
			[ #i16 flags -> #i1 explicit ( 0:0:0:0:O->%V:D:I:T:S->%N:Z->%Z:0:A<-C:0:P->%P:0:C->%C ) ],
			[ #i32 eflags -> %PSR #i16 explicit ( _ : _ <-> flags ) ]

		}

		group F {

			// FORM1
			//[ 8 ** #i80 st_mmx? -> [ #i16 _, #i64 _ ] ],
			//[ 8 ** #f80 st? -> st_mmx? ],
			//[ 8 ** #i64 mm? -> st_mmx? ],

			//FORM2
			[ 8 ** #i64 mm? ],
			[ 8 ** #i80 st_mmx? -> [ #i16 _, #i64 _ <-> mm? ] ],
			[ 8 ** #f80 st? -> st_mmx? ],

			[ #i16 sw -> explicit [ #i1 [ B, C3 ],
									#i3 TOP,
						   			#i1 [ C2, C1, C0, ES, SF, PE, UE, OE, ZE, DE, IE ] ] ],

			[ #i16 cw -> explicit [ #i3 0,
						   			#i1 X,
						   			#i2 RC,
						   			#i2 PC,
						   			#i2 0,
						   			#i1 [ PM, UM, OM, ZM, DM, IM ] ] ]
		}

		group INT : [ #i8 intno ];

	}
}

// decoder_operands [ src, dst, cond ];

macro ea ( seg, off ) : #i24 %result = ( [ #i16 seg ] << 4 ) + [ #i16 off ];
macro i8086_jump ( address ) {
	if ( address is #i16 )
		pc.off = address;
	else
		pc.[ off, seg ] = address;
}
macro i8086_jump ( seg, off ) : pc.[ seg, off ] = ( seg : off );
macro i8086_push ( value ) {
	// contract
	@fatal("Can push only 16-bit words!") unless ( value is #i16 );

	sp -= 2;
	%M[ @ea ( ss, sp ) ] = value;
}
macro i8086_pop () {
	%result = %M[ @ea ( ss, sp ) ];
	sp += 2;
}

macro i8086_str_src () : %result = @i8086_str_src ();
macro i8086_str_dst () : %result = @i8086_str_dst ();

macro i8086_str_inc () {

	if ( flags.D ) {

		si -= 1;
		di -= 1;

	} else {

		si += 1;
		di += 1;

	}

}

macro i8086_interrupt ( int_no ) {

	@i8086_push( flags );
	@i8086_push( cs );
	@i8086_push( ip );

	flags.I = 0;

	intno = int_no; // save for client

	@trap ( 0 ); // software interrupt

}

insn aaa {

	if ( flags.A || ( al & 15 ) > 9 ) {

		al += 6;
		ah += 1;

		flags.C = 1;

	} else {

		flags.C = 0;

	}
}

insn aad {

	al = %CC ( ( ah * 10 ) + al, [ Z, N, P ] );
	ah = 0;

}

insn adc  : dst = %CC ( dst + src + flags.C );
insn add  : dst = %CC ( dst + src );
insn and  {

	dst = %CC ( dst & src );
	flags.[ C, O ] = 0;

}

insn cbw  : ax = %S ( [ #i16 al ] );
insn clc  : flags.C = 0;
insn cld  : flags.D = 0;
insn cli  : flags.I = 0;
insn cmc  : flags.C = ! flags.C;
insn cmp  : %CC ( dst - src );
insn cmpsb {

	%CC ( #i8 %M[ @i8086_str_src () ] - #i8 %M[ @i8086_str_dst () ] );
	@i8086_str_inc ();

}
insn cmpsw {

	%CC ( %M[ @i8086_str_src () ] - %M[ @i8086_str_dst () ] );
	@i8086_str_inc ();

}
insn cwd  : ( dx : ax ) = %S ( [ #i32 ax ] );
insn dec  : dst = %CC ( dst - 1, !C );
insn divb {
	
	t = %U ( ax % src );
	al = %CC ( %U ( ax / src ) );
	ah = t;

}
insn divw {
	
	dx = %U ( ax % src );
	ax = %CC ( %U ( ax / src ) );

}
insn hlt  : ;
insn idivb {
	
	t = %S ( ax % src );
	al = %CC ( %S ( ax / src ) );
	ah = t;

}
insn idivw {
	
	dx = %S ( ax % src );
	ax = %CC ( %S ( ax / src ) );

}
insn imulb : ax = %CC ( %S ( al * src ) );
insn imulw : ( dx : ax ) = %CC ( %S ( ax * src ) );
insn inb   : al = @call ( i8086_input_byte, src );
insn inb_dx: al = @call ( i8086_input_byte, dx );
insn inw   : ax = @call ( i8086_input_word, src );
insn inw_dx: ax = @call ( i8086_input_word, dx );
insn inc   : dst = %CC ( dst + 1, !C );
insn int   : @i8086_interrupt ( intno );
insn into  : @i8086_interrupt ( 4 ) if ( flags.O );
insn iret {

	t_ip = @i8086_pop ();
	t_cs = @i8086_pop ();
	
	flags = @i8086_pop ();

	@i8086_jump ( t_cs, t_ip );

}

insn sub  : dst = %CC ( dst - src );
insn mul  : dst = %CC ( dst * src );
insn lea  : dst = dst + src;

insn or   : dst = %CC ( dst | src );
insn xor  : dst = %CC ( dst ^ src );
insn neg  : dst = %CC ( - dst );
insn not  : dst = %CC ( ~ dst );
insn shl  : dst = %CC ( dst << src );
insn shr  : dst = %CC ( %U ( dst >> src ) );
insn sar  : dst = %CC ( %S ( dst >> src ) );
insn rol  : dst = %CC ( dst <<> src );
insn ror  : dst = %CC ( dst >>< src );

jump insn jmp : type branch action @i8086_jump( src );
jump insn fjmp : type branch action @i8086_jump( src );
jump insn fcall : type call {
	@i8086_push ( cs );
	@i8086_push ( ip );
	@i8086_jump ( src );
}
jump insn ncall : type call {
	@i8086_push ( ip );
	@i8086_jump ( src );
}

jump insn nret : type return action @i8086_jump ( @i8086_pop () );

jump insn jx : type branch
			   condition @eval_cc ( cond )
			   action @i8086_jump ( src );

insn mov : dst = src;
insn movsb {


	#i8 %M[ @i8086_str_dst () ] = #i8 %M[ @i8086_str_src () ];
  	@i8086_str_inc ();

}
insn movsw {

	%M[  @i8086_str_dst () ] = %M[ @i8086_str_src () ];
  	@i8086_str_inc ();

    a = %S ( [ #i32 #i16 %M[ 0 ] ] );
}

// conditional execution for arm
//
group insn ALUcond [ add, sub ]
	condition @eval_cc (cond);

insn follia {

	( #i8 %M [ 0 ] : value [ 4..7 ] ) [ 0..6 ] = ( value [ 4..7 ] : value [ 0..3] ) [ 0..4 ] ;

}
